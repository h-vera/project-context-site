{
  "version": 3,
  "sources": ["../../../assets/js/character-loader.js"],
  "sourcesContent": ["/**\n * Character Loader Module\n * Path: /assets/js/character-loader.js\n * Purpose: Loads character data from JSON files for the hub pages\n */\n\nclass CharacterLoader {\n    constructor(options = {}) {\n        this.baseUrl = options.baseUrl || 'https://projectcontext.org';\n        this.filterGender = options.filterGender || null; // null, 'male', or 'female'\n        this.manifest = null;\n        this.cache = new Map(); // Cache loaded book data\n        this.initialized = false;\n    }\n\n    /**\n     * Initialize the loader by fetching the manifest\n     */\n    async initialize() {\n        if (this.initialized) return this.manifest;\n        \n        try {\n            const response = await fetch(`${this.baseUrl}/assets/data/manifest.json`);\n            if (!response.ok) {\n                throw new Error(`Failed to load manifest: ${response.status}`);\n            }\n            \n            this.manifest = await response.json();\n            this.initialized = true;\n            return this.manifest;\n            \n        } catch (error) {\n            console.error('Error loading manifest:', error);\n            // Return fallback structure if manifest fails\n            return this.getFallbackManifest();\n        }\n    }\n\n    /**\n     * Get fallback manifest structure if loading fails\n     */\n    getFallbackManifest() {\n        return {\n            version: \"1.0\",\n            lastUpdated: new Date().toISOString(),\n            totalCharacters: 300,\n            books: {\n                tanakh: {\n                    torah: [\"genesis\", \"exodus\", \"leviticus\", \"numbers\", \"deuteronomy\"],\n                    neviim: [\"joshua\", \"judges\", \"samuel\", \"kings\", \"isaiah\", \"jeremiah\", \"ezekiel\"],\n                    ketuvim: [\"psalms\", \"proverbs\", \"job\", \"ruth\", \"esther\", \"daniel\", \"chronicles\"]\n                },\n                newTestament: {\n                    gospels: [\"matthew\", \"mark\", \"luke\", \"john\"],\n                    history: [\"acts\"],\n                    epistles: [\"romans\", \"corinthians\", \"galatians\"],\n                    prophecy: [\"revelation\"]\n                }\n            }\n        };\n    }\n\n/**\n * Load character data for a specific book\n */\nasync loadBook(bookId) {\n    // Check cache first\n    if (this.cache.has(bookId)) {\n        return this.filterData(this.cache.get(bookId));\n    }\n\n    try {\n        const response = await fetch(`${this.baseUrl}/assets/data/books/${bookId}.json`);\n        if (!response.ok) {\n            throw new Error(`Failed to load book ${bookId}: ${response.status}`);\n        }\n\n        // First get the response as text to help with debugging\n        const text = await response.text();\n        let data;\n        \n        try {\n            data = JSON.parse(text);\n        } catch (parseError) {\n            // Log detailed error information for debugging\n            console.error(`JSON parse error in ${bookId}.json:`, parseError);\n            console.error('JSON parse error details:', {\n                bookId: bookId,\n                errorMessage: parseError.message,\n                errorPosition: parseError.message.match(/position (\\d+)/) ? \n                    parseError.message.match(/position (\\d+)/)[1] : 'unknown'\n            });\n            \n            // Log a portion of the JSON to help identify the issue\n            if (text.length > 0) {\n                console.error('First 500 characters of JSON:', text.substring(0, 500));\n                console.error('Last 500 characters of JSON:', text.substring(Math.max(0, text.length - 500)));\n            }\n            \n            // Throw a more descriptive error\n            throw new Error(`Invalid JSON in ${bookId}.json: ${parseError.message}`);\n        }\n        \n        // Validate the data structure\n        if (!data || typeof data !== 'object') {\n            throw new Error(`Invalid data structure in ${bookId}.json`);\n        }\n        \n        if (!data.book || !Array.isArray(data.characters)) {\n            console.warn(`Unexpected data structure in ${bookId}.json:`, {\n                hasBook: !!data.book,\n                hasCharacters: !!data.characters,\n                charactersIsArray: Array.isArray(data.characters)\n            });\n        }\n        \n        // Cache the raw data\n        this.cache.set(bookId, data);\n        \n        // Log successful load with character count\n        console.log(`Successfully loaded ${bookId}.json with ${data.characters?.length || 0} characters`);\n        \n        // Return filtered data\n        return this.filterData(data);\n        \n    } catch (error) {\n        console.error(`Error loading book ${bookId}:`, error);\n        \n        // Add a user-friendly alert for debugging (optional - remove in production)\n        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\n            console.warn(`Debug mode: Failed to load ${bookId}.json. Check console for details.`);\n        }\n        \n        // Return fallback data for specific books\n        return this.getFallbackBookData(bookId);\n    }\n}\n/**\n * Debug method to validate all book JSON files\n */\nasync validateAllBooks() {\n    const books = this.getAllBookIds();\n    const results = {\n        valid: [],\n        invalid: [],\n        missing: []\n    };\n    \n    for (const bookId of books) {\n        try {\n            const response = await fetch(`${this.baseUrl}/assets/data/books/${bookId}.json`);\n            if (!response.ok) {\n                results.missing.push(bookId);\n                continue;\n            }\n            \n            const text = await response.text();\n            try {\n                const data = JSON.parse(text);\n                if (data.book && Array.isArray(data.characters)) {\n                    results.valid.push({\n                        bookId: bookId,\n                        characterCount: data.characters.length,\n                        femaleCount: data.characters.filter(c => c.gender === 'female').length,\n                        maleCount: data.characters.filter(c => c.gender === 'male').length\n                    });\n                } else {\n                    results.invalid.push({\n                        bookId: bookId,\n                        reason: 'Invalid structure'\n                    });\n                }\n            } catch (e) {\n                results.invalid.push({\n                    bookId: bookId,\n                    reason: e.message\n                });\n            }\n        } catch (error) {\n            results.missing.push(bookId);\n        }\n    }\n    \n    console.table(results.valid);\n    if (results.invalid.length > 0) {\n        console.error('Invalid JSON files:', results.invalid);\n    }\n    if (results.missing.length > 0) {\n        console.warn('Missing JSON files:', results.missing);\n    }\n    \n    return results;\n}\n    /**\n     * Filter data based on gender if specified\n     */\n    filterData(data) {\n        if (!this.filterGender || !data.characters) {\n            return data;\n        }\n\n        return {\n            ...data,\n            characters: data.characters.filter(char => \n                char.gender === this.filterGender\n            )\n        };\n    }\n\n    /**\n     * Get all characters across all books (filtered if needed)\n     */\n    async getAllCharacters() {\n        if (!this.manifest) {\n            await this.initialize();\n        }\n\n        const allCharacters = [];\n        const books = this.getAllBookIds();\n\n        for (const bookId of books) {\n            try {\n                const bookData = await this.loadBook(bookId);\n                if (bookData.characters) {\n                    allCharacters.push(...bookData.characters.map(char => ({\n                        ...char,\n                        book: bookData.book\n                    })));\n                }\n            } catch (error) {\n                console.error(`Failed to load ${bookId}:`, error);\n            }\n        }\n\n        return allCharacters;\n    }\n\n    /**\n     * Get all book IDs from manifest\n     */\n    getAllBookIds() {\n        const ids = [];\n        \n        if (this.manifest?.books) {\n            // Tanakh books\n            if (this.manifest.books.tanakh) {\n                Object.values(this.manifest.books.tanakh).forEach(category => {\n                    if (Array.isArray(category)) {\n                        ids.push(...category);\n                    }\n                });\n            }\n            \n            // New Testament books\n            if (this.manifest.books.newTestament) {\n                Object.values(this.manifest.books.newTestament).forEach(category => {\n                    if (Array.isArray(category)) {\n                        ids.push(...category);\n                    }\n                });\n            }\n        }\n        \n        return ids;\n    }\n\n    /**\n     * Search characters by query\n     */\n    async searchCharacters(query) {\n        const allCharacters = await this.getAllCharacters();\n        const lowerQuery = query.toLowerCase();\n        \n        return allCharacters.filter(char => {\n            return char.name?.toLowerCase().includes(lowerQuery) ||\n                   char.hebrew?.includes(query) ||\n                   char.greek?.includes(query) ||\n                   char.meaning?.toLowerCase().includes(lowerQuery) ||\n                   char.summary?.toLowerCase().includes(lowerQuery) ||\n                   char.tags?.some(tag => tag.toLowerCase().includes(lowerQuery));\n        });\n    }\n\n    /**\n     * Get featured characters\n     */\n    async getFeaturedCharacters(limit = 6) {\n        // Define featured character IDs\n        const featuredIds = [\n            { book: 'genesis', id: 'abraham' },\n            { book: 'genesis', id: 'sarah' },\n            { book: 'exodus', id: 'moses' },\n            { book: 'judges', id: 'deborah' },\n            { book: 'genesis', id: 'hagar' },\n            { book: 'judges', id: 'delilah' }\n        ];\n\n        const featured = [];\n        \n        for (const item of featuredIds.slice(0, limit)) {\n            try {\n                const bookData = await this.loadBook(item.book);\n                const character = bookData.characters?.find(c => c.id === item.id);\n                if (character) {\n                    featured.push({\n                        ...character,\n                        book: bookData.book\n                    });\n                }\n            } catch (error) {\n                console.error(`Failed to load featured character ${item.id}:`, error);\n            }\n        }\n\n        return featured;\n    }\n\n    /**\n     * Get statistics about the characters\n     */\n    async getStatistics() {\n        if (!this.manifest) {\n            await this.initialize();\n        }\n\n        const stats = {\n            totalCharacters: 0,\n            totalBooks: 0,\n            byGender: { male: 0, female: 0, unknown: 0 },\n            byTestament: { tanakh: 0, newTestament: 0 }\n        };\n\n        const books = this.getAllBookIds();\n        stats.totalBooks = books.length;\n\n        for (const bookId of books) {\n            try {\n                const bookData = await this.loadBook(bookId);\n                if (bookData.characters) {\n                    stats.totalCharacters += bookData.characters.length;\n                    \n                    bookData.characters.forEach(char => {\n                        const gender = char.gender || 'unknown';\n                        stats.byGender[gender] = (stats.byGender[gender] || 0) + 1;\n                        \n                        // Determine testament based on book\n                        const testament = this.getTestament(bookId);\n                        if (testament) {\n                            stats.byTestament[testament]++;\n                        }\n                    });\n                }\n            } catch (error) {\n                console.error(`Failed to get stats for ${bookId}:`, error);\n            }\n        }\n\n        return stats;\n    }\n\n    /**\n     * Determine which testament a book belongs to\n     */\n    getTestament(bookId) {\n        if (!this.manifest?.books) return null;\n        \n        // Check Tanakh\n        if (this.manifest.books.tanakh) {\n            for (const category of Object.values(this.manifest.books.tanakh)) {\n                if (Array.isArray(category) && category.includes(bookId)) {\n                    return 'tanakh';\n                }\n            }\n        }\n        \n        // Check New Testament\n        if (this.manifest.books.newTestament) {\n            for (const category of Object.values(this.manifest.books.newTestament)) {\n                if (Array.isArray(category) && category.includes(bookId)) {\n                    return 'newTestament';\n                }\n            }\n        }\n        \n        return null;\n    }\n\n    /**\n     * Get fallback data for a specific book\n     */\n    getFallbackBookData(bookId) {\n        // Provide sample fallback data for key books\n        const fallbackData = {\n            genesis: {\n                book: {\n                    id: \"genesis\",\n                    name: \"Genesis\",\n                    hebrew: \"\u05D1\u05B0\u05BC\u05E8\u05B5\u05D0\u05E9\u05B4\u05C1\u05D9\u05EA\",\n                    characterCount: 30\n                },\n                characters: [\n                    {\n                        id: \"abraham\",\n                        name: \"Abraham\",\n                        hebrew: \"\u05D0\u05B7\u05D1\u05B0\u05E8\u05B8\u05D4\u05B8\u05DD\",\n                        gender: \"male\",\n                        profilePath: \"/studies/characters/genesis/abraham.html\",\n                        references: [\"Gen 11-25\"],\n                        summary: \"Father of faith and patriarch of Israel\",\n                        tags: [\"Patriarch\", \"Covenant\"]\n                    },\n                    {\n                        id: \"sarah\",\n                        name: \"Sarah\",\n                        hebrew: \"\u05E9\u05B8\u05C2\u05E8\u05B8\u05D4\",\n                        gender: \"female\",\n                        profilePath: \"/studies/characters/genesis/sarah.html\",\n                        references: [\"Gen 11-25\"],\n                        summary: \"Mother of nations, wife of Abraham\",\n                        tags: [\"Matriarch\"]\n                    }\n                ]\n            },\n            exodus: {\n                book: {\n                    id: \"exodus\",\n                    name: \"Exodus\",\n                    hebrew: \"\u05E9\u05B0\u05C1\u05DE\u05D5\u05B9\u05EA\",\n                    characterCount: 15\n                },\n                characters: [\n                    {\n                        id: \"moses\",\n                        name: \"Moses\",\n                        hebrew: \"\u05DE\u05B9\u05E9\u05B6\u05C1\u05D4\",\n                        gender: \"male\",\n                        profilePath: \"/studies/characters/exodus/moses.html\",\n                        references: [\"Exodus-Deuteronomy\"],\n                        summary: \"Prophet, lawgiver, and deliverer of Israel\",\n                        tags: [\"Prophet\", \"Leader\"]\n                    },\n                    {\n                        id: \"miriam\",\n                        name: \"Miriam\",\n                        hebrew: \"\u05DE\u05B4\u05E8\u05B0\u05D9\u05B8\u05DD\",\n                        gender: \"female\",\n                        profilePath: \"/studies/characters/exodus/miriam.html\",\n                        references: [\"Ex 2, 15\"],\n                        summary: \"Prophetess and sister of Moses\",\n                        tags: [\"Prophetess\"]\n                    }\n                ]\n            }\n        };\n\n        return fallbackData[bookId] || {\n            book: {\n                id: bookId,\n                name: bookId.charAt(0).toUpperCase() + bookId.slice(1),\n                characterCount: 0\n            },\n            characters: []\n        };\n    }\n\n    /**\n     * Clear the cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Preload specific books into cache\n     */\n    async preloadBooks(bookIds) {\n        const promises = bookIds.map(bookId => this.loadBook(bookId));\n        await Promise.all(promises);\n    }\n}\n\n// Export for use as ES6 module\nexport default CharacterLoader;"],
  "mappings": "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",
  "names": ["CharacterLoader", "options", "response", "error", "bookId", "text", "data", "parseError", "books", "results", "c", "e", "char", "allCharacters", "bookData", "ids", "category", "query", "lowerQuery", "tag", "limit", "featuredIds", "featured", "item", "character", "stats", "gender", "testament", "bookIds", "promises", "character_loader_default"]
}
