{
  "version": 3,
  "sources": ["../../../assets/js/mobile-menu.js"],
  "sourcesContent": ["/**\n * Mobile Menu Handler for Project Context\n * Path: /assets/js/mobile-menu.js\n * Handles hamburger menu functionality for all hub pages\n * Updated with iOS-specific fixes and improved touch handling\n * \n * @version 2.0.0\n * @updated 2024\n * \n * Browser Support:\n * - iOS Safari 12+\n * - Chrome 80+\n * - Firefox 75+\n * - Samsung Internet 12+\n * - Edge 80+\n */\n\n(function() {\n    'use strict';\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Early exit if we're in a desktop environment\n    const isDesktop = window.matchMedia('(min-width: 769px)').matches;\n    \n    // Create mobile menu overlay if it doesn't exist\n    let overlay = document.querySelector('.mobile-menu-overlay');\n    if (!overlay) {\n        overlay = document.createElement('div');\n        overlay.className = 'mobile-menu-overlay';\n        document.body.appendChild(overlay);\n    }\n\n    // Get menu elements\n    const menuToggle = document.querySelector('.mobile-menu-toggle');\n    const navLinks = document.querySelector('.nav-links');\n    const body = document.body;\n\n    // Check if elements exist\n    if (!menuToggle || !navLinks) {\n        console.warn('Mobile menu elements not found');\n        return;\n    }\n\n    // Track scroll position for iOS fix\n    let scrollPosition = 0;\n\n    // Toggle menu function\n    function toggleMenu() {\n        const isOpen = menuToggle.classList.contains('active');\n        \n        if (isOpen) {\n            closeMenu();\n        } else {\n            openMenu();\n        }\n    }\n\n    // Open menu\n    function openMenu() {\n        // Save scroll position before locking\n        scrollPosition = window.pageYOffset || document.documentElement.scrollTop;\n        \n        menuToggle.classList.add('active');\n        navLinks.classList.add('active');\n        overlay.classList.add('active');\n        body.classList.add('menu-open');\n        \n        // iOS-specific: Prevent background scrolling\n        body.style.position = 'fixed';\n        body.style.width = '100%';\n        body.style.top = `-${scrollPosition}px`;\n        body.style.overflow = 'hidden';\n        \n        // Set ARIA attributes for accessibility\n        menuToggle.setAttribute('aria-expanded', 'true');\n        navLinks.setAttribute('aria-hidden', 'false');\n    }\n\n    // Close menu\n    function closeMenu() {\n        // Don't do anything if menu is already closed\n        if (!menuToggle.classList.contains('active')) {\n            return;\n        }\n        \n        menuToggle.classList.remove('active');\n        navLinks.classList.remove('active');\n        overlay.classList.remove('active');\n        body.classList.remove('menu-open');\n        \n        // iOS-specific: Restore background scrolling\n        body.style.position = '';\n        body.style.width = '';\n        body.style.top = '';\n        body.style.overflow = '';\n        \n        // Restore scroll position\n        window.scrollTo(0, scrollPosition);\n        \n        // Set ARIA attributes for accessibility\n        menuToggle.setAttribute('aria-expanded', 'false');\n        navLinks.setAttribute('aria-hidden', 'true');\n    }\n\n    // Track if we've already handled this interaction to prevent double-firing\n    let handled = false;\n    \n    // Event listeners - Updated for better iOS compatibility\n    menuToggle.addEventListener('click', function(e) {\n        if (handled) return;\n        e.preventDefault();\n        e.stopPropagation();\n        toggleMenu();\n        handled = true;\n        setTimeout(() => { handled = false; }, 300);\n    });\n\n    // Add touchend event for better iOS response\n    menuToggle.addEventListener('touchend', function(e) {\n        if (handled) return;\n        e.preventDefault();\n        e.stopPropagation();\n        toggleMenu();\n        handled = true;\n        setTimeout(() => { handled = false; }, 300);\n    }, { passive: false });\n\n    // Close menu when clicking overlay\n    overlay.addEventListener('click', closeMenu);\n    \n    // Also handle touch on overlay for iOS\n    overlay.addEventListener('touchend', function(e) {\n        e.preventDefault();\n        closeMenu();\n    }, { passive: false });\n\n    // Handle dropdown toggles in mobile menu\n    const dropdownToggles = navLinks.querySelectorAll('.dropdown-toggle');\n    dropdownToggles.forEach(toggle => {\n        toggle.addEventListener('click', function(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            const dropdown = this.parentElement;\n            dropdown.classList.toggle('active');\n        });\n    });\n\n    // Close menu when clicking a link (but not dropdown toggles)\n    const menuLinks = navLinks.querySelectorAll('a:not(.dropdown-toggle)');\n    menuLinks.forEach(link => {\n        link.addEventListener('click', function(e) {\n            // Don't close if it's a hash link to current page\n            const href = this.getAttribute('href');\n            if (href && href !== '#' && !href.startsWith('#')) {\n                closeMenu();\n            }\n        });\n    });\n\n    // Close menu on escape key\n    document.addEventListener('keydown', function(e) {\n        if (e.key === 'Escape' && menuToggle.classList.contains('active')) {\n            closeMenu();\n        }\n    });\n\n    // Handle window resize\n    let resizeTimer;\n    window.addEventListener('resize', function() {\n        clearTimeout(resizeTimer);\n        resizeTimer = setTimeout(function() {\n            // Close menu if window is resized to desktop size\n            if (window.innerWidth > 768 && menuToggle.classList.contains('active')) {\n                closeMenu();\n            }\n        }, 250);\n    });\n\n    // Prevent menu from staying open on iOS rotation\n    window.addEventListener('orientationchange', function() {\n        setTimeout(closeMenu, 100);\n    });\n\n    // iOS-specific fixes for smooth scrolling and bounce prevention\n    if (/iPhone|iPad|iPod/.test(navigator.userAgent)) {\n        let startY = 0;\n        \n        navLinks.addEventListener('touchstart', function(e) {\n            startY = e.touches[0].pageY;\n        }, { passive: true });\n\n        navLinks.addEventListener('touchmove', function(e) {\n            const y = e.touches[0].pageY;\n            const scrollTop = navLinks.scrollTop;\n            const scrollHeight = navLinks.scrollHeight;\n            const height = navLinks.clientHeight;\n            \n            const isScrollingUp = y > startY && scrollTop === 0;\n            const isScrollingDown = y < startY && scrollTop + height >= scrollHeight;\n            \n            // Prevent rubber-band scrolling at edges\n            if (isScrollingUp || isScrollingDown) {\n                e.preventDefault();\n            }\n        }, { passive: false });\n\n        // Prevent swipe-to-go-back when menu is open\n        document.addEventListener('touchstart', function(e) {\n            if (menuToggle.classList.contains('active') && e.touches[0].clientX < 20) {\n                e.preventDefault();\n            }\n        }, { passive: false });\n    }\n\n    // Set initial ARIA attributes\n    menuToggle.setAttribute('aria-label', 'Toggle navigation menu');\n    menuToggle.setAttribute('aria-expanded', 'false');\n    navLinks.setAttribute('aria-hidden', 'true');\n    navLinks.setAttribute('aria-label', 'Main navigation');\n\n    // Performance: Use passive listeners where possible for better scroll performance\n    document.addEventListener('scroll', function() {\n        // Auto-close menu on scroll if needed\n        if (menuToggle.classList.contains('active') && window.scrollY > 100) {\n            // Uncomment if you want menu to close on scroll\n            // closeMenu();\n        }\n    }, { passive: true });\n\n    // Clean up function for SPAs or dynamic content\n    window.addEventListener('beforeunload', function() {\n        closeMenu();\n    });\n\n    // Handle visibility change (e.g., switching tabs)\n    document.addEventListener('visibilitychange', function() {\n        if (document.hidden && menuToggle.classList.contains('active')) {\n            closeMenu();\n        }\n    });\n\n    // Debug info\n    console.log('Mobile menu initialized successfully with iOS fixes');\n});\n\n/**\n * Fallback for older browsers without classList\n */\nif (!('classList' in document.createElement('_'))) {\n    console.error('This browser does not support classList. Please update your browser.');\n}\n(() => {\n  // ===== Mobile Nav \u2013 Update Section =====\n  // Safe handles for optional hamburger & drawer (adjust selectors to your HTML)\n  const menuToggle = document.querySelector('#menuToggle, .menu-toggle');\n  const drawer     = document.querySelector('#mobileNav, .mobile-nav, .nav-drawer');\n\n  // Close the drawer safely (no-ops if not present)\n  function closeMenu() {\n    if (menuToggle) menuToggle.classList.remove('active');\n    if (drawer)     drawer.classList.remove('open', 'active', 'visible');\n    // Also collapse any open dropdowns inside the nav\n    document.querySelectorAll('.nav-links .dropdown.open').forEach(li => {\n      li.classList.remove('open');\n      li.querySelector('.dropdown-toggle')?.setAttribute('aria-expanded', 'false');\n      const panel = li.querySelector('.dropdown-content');\n      if (panel) panel.style.display = '';\n    });\n  }\n\n  // --- Progressive enhancement: mobile dropdown toggle ---\n  document.querySelectorAll('.nav-links .dropdown > .dropdown-toggle').forEach((toggle) => {\n    toggle.addEventListener('click', (e) => {\n      if (window.matchMedia('(max-width: 768px)').matches) {\n        e.preventDefault();\n        const li = toggle.closest('.dropdown');\n        const panel = li?.querySelector('.dropdown-content');\n        const open = li?.classList.toggle('open');\n        if (open != null) toggle.setAttribute('aria-expanded', open ? 'true' : 'false');\n        if (panel) panel.style.display = open ? 'block' : 'none';\n      }\n    });\n  });\n\n  // --- Reset states when crossing mobile/desktop boundary ---\n  const mq = window.matchMedia('(max-width: 768px)');\n  const handleViewportChange = () => {\n    if (!mq.matches) {\n      // We are now on desktop: clear any mobile-only states\n      closeMenu();\n    }\n  };\n  // Fire once on load and again whenever the breakpoint is crossed\n  handleViewportChange();\n  mq.addEventListener ? mq.addEventListener('change', handleViewportChange)\n                      : mq.addListener(handleViewportChange); // old Safari fallback\n\n  // --- Performance: passive listeners & defensive cleanups ---\n  document.addEventListener('scroll', () => {\n    // Auto-close menu on scroll if desired\n    // if (menuToggle?.classList.contains('active') && window.scrollY > 100) closeMenu();\n  }, { passive: true });\n\n  window.addEventListener('beforeunload', () => {\n    // Clean up any open states on navigation\n    closeMenu();\n  });\n\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden && menuToggle?.classList.contains('active')) {\n      closeMenu();\n    }\n  });\n\n  // --- Debug ---\n  console.log('Mobile menu initialized successfully with iOS fixes & resize resets');\n\n  // --- Fallback for very old browsers (classList) ---\n  if (!('classList' in document.createElement('_'))) {\n    console.error('This browser lacks classList support. Please update your browser.');\n  }\n})(); // End IIFE\n})(); // End outer IIFE"],
  "mappings": "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",
  "names": ["isDesktop", "overlay", "menuToggle", "navLinks", "body", "scrollPosition", "toggleMenu", "closeMenu", "openMenu", "handled", "e", "toggle", "link", "href", "resizeTimer", "startY", "y", "scrollTop", "scrollHeight", "height", "isScrollingUp", "isScrollingDown", "drawer", "li", "panel", "open", "mq", "handleViewportChange"]
}
