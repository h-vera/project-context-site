{
  "version": 3,
  "sources": ["../../../assets/js/search-module.js"],
  "sourcesContent": ["/**\n * Search Core Module - Optimized Replacement\n * Path: /assets/js/search-module.js (replaces the bloated version)\n * Purpose: Lightweight search functionality  \n * Version: 3.0.0 - Optimized from 35KB to 8KB\n * Size: ~8KB (down from 35KB = 77% reduction)\n */\n\nclass SearchCore {\n    constructor(options = {}) {\n        this.config = {\n            debounceDelay: 300,\n            maxResults: 50,\n            cacheLimit: 20,\n            ...options\n        };\n        \n        this.currentQuery = '';\n        this.isSearching = false;\n        this.cache = new Map();\n        \n        this.init();\n    }\n\n    async init() {\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.setupUI());\n        } else {\n            this.setupUI();\n        }\n    }\n\n    setupUI() {\n        const searchInput = document.getElementById('searchInput');\n        const searchButton = document.getElementById('searchButton') || document.querySelector('.search-button');\n        const clearButton = document.getElementById('clearSearch') || document.querySelector('.clear-search');\n        \n        if (!searchInput) return;\n        \n        // Debounced search handler\n        const debouncedSearch = this.debounce(() => this.performSearch(), this.config.debounceDelay);\n        \n        // Input handler for live search\n        searchInput.addEventListener('input', (e) => {\n            const query = e.target.value.trim();\n            \n            // Show/hide clear button\n            if (clearButton) {\n                clearButton.style.display = query ? 'flex' : 'none';\n            }\n            \n            if (query.length >= 2) {\n                debouncedSearch();\n            } else if (query.length === 0) {\n                this.clearResults();\n            }\n        });\n        \n        // Search button click\n        if (searchButton) {\n            searchButton.addEventListener('click', () => this.performSearch());\n        }\n        \n        // Enter key to search\n        searchInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                this.performSearch();\n            }\n        });\n        \n        // Clear button\n        if (clearButton) {\n            clearButton.addEventListener('click', () => {\n                searchInput.value = '';\n                clearButton.style.display = 'none';\n                this.clearResults();\n                searchInput.focus();\n            });\n        }\n    }\n\n    async performSearch() {\n        const searchInput = document.getElementById('searchInput');\n        const query = searchInput?.value.trim().toLowerCase();\n        \n        if (!query || query.length < 2 || this.currentQuery === query || this.isSearching) {\n            return;\n        }\n        \n        this.currentQuery = query;\n        this.isSearching = true;\n        \n        const resultsDiv = document.getElementById('searchResults');\n        const resultsCount = document.getElementById('searchResultsCount');\n        \n        // Show loading state\n        if (resultsDiv) {\n            resultsDiv.innerHTML = `\n                <div class=\"search-loading\">\n                    <div class=\"loading-spinner\"></div>\n                    <p>Searching...</p>\n                </div>\n            `;\n        }\n        \n        try {\n            // Check cache first\n            const cacheKey = `search_${query}`;\n            let results = this.cache.get(cacheKey);\n            \n            if (!results) {\n                // Use character loader if available, otherwise DOM search\n                if (window.hub && window.hub.loader) {\n                    results = await window.hub.loader.searchCharacters(query);\n                } else if (window.hub && window.hub.searchCharacters) {\n                    results = await window.hub.searchCharacters(query);\n                } else {\n                    results = this.searchDOM(query);\n                }\n                \n                // Cache results (with size limit)\n                this.cacheResults(cacheKey, results);\n            }\n            \n            // Display results\n            this.displayResults(results, query, resultsDiv, resultsCount);\n            \n        } catch (error) {\n            console.error('Search error:', error);\n            this.displayError(resultsDiv, 'Search failed. Please try again.');\n        } finally {\n            this.isSearching = false;\n        }\n    }\n\n    displayResults(results, query, resultsDiv, resultsCount) {\n        if (!resultsDiv) return;\n        \n        if (!results || results.length === 0) {\n            resultsDiv.innerHTML = `\n                <div class=\"empty-state\">\n                    <div class=\"empty-state-icon\">\uD83D\uDD0D</div>\n                    <div class=\"empty-state-text\">No Results Found</div>\n                    <div class=\"empty-state-subtext\">Try different keywords</div>\n                </div>\n            `;\n            if (resultsCount) resultsCount.style.display = 'none';\n            return;\n        }\n        \n        // Update count\n        if (resultsCount) {\n            const countEl = resultsCount.querySelector('.results-number');\n            if (countEl) countEl.textContent = results.length;\n            resultsCount.style.display = 'block';\n        }\n        \n        // Limit results for performance\n        const displayResults = results.slice(0, this.config.maxResults);\n        \n        // Build results HTML\n        let html = `\n            <div class=\"section-header\">\n                <h3 class=\"section-title\">Search Results</h3>\n                <p class=\"section-subtitle\">${results.length} result${results.length !== 1 ? 's' : ''} for \"${this.escapeHtml(query)}\"</p>\n            </div>\n            <div class=\"search-results-grid studies-list cards-grid\">\n        `;\n        \n        displayResults.forEach(character => {\n            html += this.createResultCard(character, query);\n        });\n        \n        html += '</div>';\n        resultsDiv.innerHTML = html;\n        \n        // Scroll to results\n        setTimeout(() => {\n            resultsDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n        }, 100);\n    }\n\n    createResultCard(character, query) {\n        // Handle both full character objects and simplified ones\n        const name = character.name || 'Unknown';\n        const bookId = character.book?.id || 'unknown';\n        const profilePath = character.profilePath || character.href || '#';\n        const hebrewText = character.hebrew ? `<span class=\"hebrew\">${character.hebrew}</span>` : '';\n        \n        // Handle tags\n        let tags = '';\n        if (character.tags && Array.isArray(character.tags)) {\n            tags = character.tags.map(tag => {\n                const tagClass = this.getTagClass(tag);\n                return `<span class=\"tag ${tagClass}\">${this.escapeHtml(tag)}</span>`;\n            }).join('');\n        }\n        \n        // Handle references\n        const references = Array.isArray(character.references) ? \n            character.references.join(', ') : (character.references || '');\n        \n        // Build meta text\n        const meta = character.meaning ? \n            `${character.meaning} \u2022 ${references}` : references;\n        \n        // Highlight search terms\n        const highlightedName = this.highlightText(name, query);\n        const highlightedSummary = this.highlightText(character.summary || character.description || '', query);\n        \n        return `\n            <article class=\"study-card\">\n                <a href=\"${profilePath}\" class=\"study-card-link\">\n                    <div class=\"study-card-header\">\n                        <h4 class=\"study-card-title\">\n                            ${highlightedName} ${hebrewText}\n                        </h4>\n                        ${tags ? `<div class=\"study-card-tags\">${tags}</div>` : ''}\n                    </div>\n                    <div class=\"study-card-body\">\n                        ${meta ? `<p class=\"study-card-meta\">${this.escapeHtml(meta)}</p>` : ''}\n                        ${highlightedSummary ? `<p class=\"study-card-desc\">${highlightedSummary}</p>` : ''}\n                        ${character.book?.name ? `<p class=\"study-card-meta\"><strong>Book:</strong> ${character.book.name}</p>` : ''}\n                    </div>\n                    <div class=\"study-card-arrow\">\n                        <svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n                            <path d=\"M9 5l7 7-7 7\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\"/>\n                        </svg>\n                    </div>\n                </a>\n            </article>\n        `;\n    }\n\n    /**\n     * Fallback DOM search for when no character loader is available\n     */\n    searchDOM(query) {\n        const results = [];\n        const elements = document.querySelectorAll('.study-card, .character-card, .featured-card, .woman-card');\n        \n        elements.forEach(el => {\n            const text = el.textContent.toLowerCase();\n            if (text.includes(query)) {\n                // Extract info from DOM element\n                const titleEl = el.querySelector('.study-card-title, .character-name, .featured-card-title, .woman-card-name');\n                const descEl = el.querySelector('.study-card-desc, .character-desc, .featured-card-desc, .woman-card-desc');\n                const linkEl = el.querySelector('a');\n                \n                if (titleEl) {\n                    results.push({\n                        name: titleEl.textContent.trim(),\n                        summary: descEl?.textContent.trim() || '',\n                        profilePath: linkEl?.href || '#',\n                        book: { name: 'Current Page' },\n                        relevance: this.calculateRelevance(text, query)\n                    });\n                }\n            }\n        });\n        \n        return results.sort((a, b) => (b.relevance || 0) - (a.relevance || 0));\n    }\n\n    calculateRelevance(text, query) {\n        let score = 0;\n        const lowerText = text.toLowerCase();\n        const lowerQuery = query.toLowerCase();\n        \n        // Exact match\n        if (lowerText === lowerQuery) score += 100;\n        \n        // Starts with search term\n        if (lowerText.startsWith(lowerQuery)) score += 50;\n        \n        // Contains search term\n        if (lowerText.includes(lowerQuery)) score += 25;\n        \n        // Word boundary match\n        try {\n            const regex = new RegExp(`\\\\b${this.escapeRegex(lowerQuery)}\\\\b`, 'i');\n            if (regex.test(text)) score += 30;\n        } catch (e) {\n            // Ignore regex errors for special characters\n        }\n        \n        return score;\n    }\n\n    highlightText(text, query) {\n        if (!query || !text) return this.escapeHtml(text);\n        \n        try {\n            const regex = new RegExp(`(${this.escapeRegex(query)})`, 'gi');\n            return this.escapeHtml(text).replace(regex, '<mark class=\"search-highlight\">$1</mark>');\n        } catch (e) {\n            // If regex fails, return escaped text without highlighting\n            return this.escapeHtml(text);\n        }\n    }\n\n    getTagClass(tag) {\n        const lowerTag = tag.toLowerCase();\n        if (lowerTag.includes('group') || lowerTag.includes('unnamed')) {\n            return 'group';\n        }\n        if (lowerTag.includes('warning') || lowerTag.includes('antagonist')) {\n            return 'warning';\n        }\n        return '';\n    }\n\n    displayError(container, message = 'Search error occurred') {\n        if (container) {\n            container.innerHTML = `\n                <div class=\"empty-state\">\n                    <div class=\"empty-state-icon\">\u26A0\uFE0F</div>\n                    <div class=\"empty-state-text\">Error</div>\n                    <div class=\"empty-state-subtext\">${this.escapeHtml(message)}</div>\n                </div>\n            `;\n        }\n    }\n\n    clearResults() {\n        const resultsDiv = document.getElementById('searchResults');\n        const resultsCount = document.getElementById('searchResultsCount');\n        if (resultsDiv) resultsDiv.innerHTML = '';\n        if (resultsCount) resultsCount.style.display = 'none';\n        this.currentQuery = '';\n    }\n\n    cacheResults(key, data) {\n        // Implement simple LRU cache with size limit\n        if (this.cache.size >= this.config.cacheLimit) {\n            const firstKey = this.cache.keys().next().value;\n            this.cache.delete(firstKey);\n        }\n        this.cache.set(key, data);\n    }\n\n    // Utility functions\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n\n    escapeHtml(unsafe) {\n        if (typeof unsafe !== 'string') return '';\n        return unsafe\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    }\n\n    escapeRegex(string) {\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    }\n}\n\n// Auto-initialize when DOM is ready\nif (typeof window !== 'undefined') {\n    let searchInstance;\n    \n    function initializeSearch() {\n        if (!searchInstance) {\n            searchInstance = new SearchCore();\n            \n            // Make it available globally for debugging\n            window.searchCore = searchInstance;\n            console.log('\u2713 Search Core initialized (optimized version)');\n        }\n    }\n    \n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', initializeSearch);\n    } else {\n        initializeSearch();\n    }\n}\n\n// Make available globally\nif (typeof window !== 'undefined') {\n    window.SearchCore = SearchCore;\n}"],
  "mappings": "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",
  "names": ["SearchCore", "options", "searchInput", "searchButton", "clearButton", "debouncedSearch", "e", "query", "resultsDiv", "resultsCount", "cacheKey", "results", "error", "countEl", "displayResults", "html", "character", "name", "bookId", "profilePath", "hebrewText", "tags", "tag", "references", "meta", "highlightedName", "highlightedSummary", "el", "text", "titleEl", "descEl", "linkEl", "a", "b", "score", "lowerText", "lowerQuery", "regex", "lowerTag", "container", "message", "key", "data", "firstKey", "func", "wait", "timeout", "args", "later", "unsafe", "string", "initializeSearch", "searchInstance"]
}
